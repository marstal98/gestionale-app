// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  // Use SQLite for local development in the unified workspace.
  // In production, override DATABASE_URL in the environment with a postgres URL.
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id             Int      @id @default(autoincrement())
  name           String
  email          String   @unique
  password       String // hash bcrypt
  role           Role     @default(customer)
  isActive       Boolean  @default(true)
  // orders assigned to this user (could be employee or customer)
  assignedOrders Order[]  @relation("OrderAssignedTo")
  // orders where this user is the customer
  customerOrders Order[]  @relation("OrderCustomer")
  // orders created by this user (admin or customer creating on their behalf)
  createdOrders  Order[]  @relation("OrderCreatedBy")
  createdAt      DateTime @default(now())
}

enum Role {
  admin
  employee
  customer
}

model Product {
  id                 Int                 @id @default(autoincrement())
  name               String
  sku                String?             @unique
  price              Float
  stock              Int                 @default(0)
  createdAt          DateTime            @default(now())
  orderItems         OrderItem[]
  inventoryMovements InventoryMovement[]
}

enum OrderStatus {
  pending
  processing
  completed
  cancelled
}

model Order {
  id           Int         @id @default(autoincrement())
  // the customer for whom the order is placed
  customer     User?       @relation("OrderCustomer", fields: [customerId], references: [id])
  customerId   Int?
  // the user who created the order (could be admin or the customer themselves)
  createdBy    User?       @relation("OrderCreatedBy", fields: [createdById], references: [id])
  createdById  Int?
  // Optional assignee: can be a customer or an employee (references User)
  assignedTo   User?       @relation("OrderAssignedTo", fields: [assignedToId], references: [id])
  assignedToId Int?
  total        Float
  status       OrderStatus @default(pending)
  createdAt    DateTime    @default(now())
  items        OrderItem[]
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   Int
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int
  unitPrice Float
}

model InventoryMovement {
  id        Int      @id @default(autoincrement())
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  type      String // 'adjust' | 'reserve' | 'release' | 'sale'
  quantity  Int
  metadata  Json?
  createdAt DateTime @default(now())
}
